import { useEffect, useState } from "react";
import dynamic from "next/dynamic";
import {
  getKeyCredentialCreationOptions,
  getRequestOptions,
} from "../utils/webauthn";
import useWebAuthnSupportCheck from "../utils/useWebAuthnSupportCheck";

// import the component client-side only
const WebAuthnSupportTable = dynamic(
  () => import("../components/WebAuthnSupportTable"),
  { ssr: false }
);

enum STATUS {
  NOT_REGISTERED,
  LOGGED,
  NOT_LOGGED,
}

const HomeView = ({ status, userId }: { status: STATUS; userId: string }) => {
  if (status === STATUS.NOT_REGISTERED)
    return <p>Choose an username and register</p>;

  if (status === STATUS.NOT_LOGGED)
    return (
      <div>
        <p>You're registered! Here's the id assigned to you:</p>
        <p style={{ fontSize: "0.7rem" }}>{userId}</p>
        <p>You can now authentificate yourself if you want</p>
      </div>
    );

  return (
    <div>
      <p>You're logged! Here's the id assigned to you:</p>
      <p style={{ fontSize: "0.7rem" }}>{userId}</p>
    </div>
  );
};

export default function Home() {
  const [username, setUsername] = useState<string>("");
  const [base64UserId, saveBase64UserId] = useState<string | null>();
  const [isSupported] = useWebAuthnSupportCheck();
  const [status, setStatus] = useState<STATUS>(STATUS.NOT_REGISTERED);

  useEffect(() => {
    // fetch the userId from the local storage
    const userId = localStorage.getItem("userId");
    if (!userId) return;

    // if there is a userId saved it in the state
    saveBase64UserId(userId);
    setStatus(STATUS.NOT_LOGGED);
  }, []);

  const register = async () => {
    try {
      // fetch the challenge and the userId
      const [challengeRes, userIdRes] = await Promise.all([
        fetch("/api/webauthn/challenge"),
        fetch("/api/userId", {
          method: "POST",
          body: JSON.stringify({ username }),
        }),
      ]);
      const [challenge, { userId }] = await Promise.all([
        challengeRes.arrayBuffer(),
        userIdRes.json(),
      ]);

      // get the current domain
      const currentDomain = window.location.hostname;

      // create the options for webauthn
      const options = getKeyCredentialCreationOptions(
        challenge,
        currentDomain,
        username,
        Buffer.from(userId, "utf8")
      );

      // create the credential
      const credential = await navigator.credentials.create(options);
      console.log(credential.id);

      // save the ID in the state and in the local storage
      saveBase64UserId(credential.id);
      localStorage.setItem("userId", credential.id);

      // set the status
      setStatus(STATUS.NOT_LOGGED);

      // log the certificate created by the authenticator during the registration process
      console.log(
        "Here's the certificate created by the authenticator you chose during the registration process",
        "\n",
        credential
      );

      /**
       * @TODO At this point, the challenge, the username and the credential need to be returned to the server
       * The server has the responsibility to verify if the challenge matches the one previously returned
       * and it must validate the certificate generated by the authenticator
       * If everything is good, the certificate and the username would be stored
       */
    } catch (e) {
      console.error(e);
      throw e;
    }
  };

  const login = async () => {
    try {
      const res = await fetch("/api/webauthn/challenge");
      const challenge = await res.arrayBuffer();

      // create the options for webauthn
      const options = getRequestOptions(
        challenge,
        // id returned by the authenticator during the registration step is encoded using base64
        Buffer.from(base64UserId, "base64")
      );

      // create the credential
      const credential = await navigator.credentials.get(options);

      // flag the user as logged
      setStatus(STATUS.LOGGED);

      // log the certificate created by the authenticator during the authentification process
      console.log(
        "Here's the certificate created by the authenticator you chose during the authentification process",
        "\n",
        credential
      );

      /**
       * @TODO At this point, the challenge and the credential need to be returned to the server
       * The server has the responsibility to verify if the challenge matches the one previously returned
       * and it must validate the certificate generated by the authenticator
       */
    } catch (e) {
      console.error(e);
      throw e;
    }
  };

  const logout = () => setStatus(STATUS.NOT_LOGGED);

  // this function is in charge of removing the userId from the localstorage and reset the state of the app
  const reset = () => {
    saveBase64UserId(null);
    setStatus(STATUS.NOT_REGISTERED);
    localStorage.removeItem("userId");
  };

  return (
    <main style={{ display: "flex", flexDirection: "column", rowGap: "1rem" }}>
      <WebAuthnSupportTable />
      <section
        style={{
          display: "flex",
          flexDirection: "column",
          alignItems: "flex-start",
          rowGap: "1rem",
        }}
      >
        <div
          style={{
            display: "flex",
            flexDirection: "column",
            alignItems: "flex-start",
          }}
        >
          <label htmlFor="username">Username</label>
          <input
            name="username"
            type="text"
            value={username}
            onChange={(e) => setUsername(e.target.value)}
            placeholder="0xWebAuthn"
            disabled={!!base64UserId}
          />
        </div>
        <div>
          <button onClick={register} disabled={!isSupported || !!base64UserId}>
            register
          </button>
          <button onClick={reset} disabled={!isSupported || !base64UserId}>
            delete your account
          </button>
        </div>
        <div>
          <button
            onClick={login}
            disabled={!base64UserId || status === STATUS.LOGGED}
          >
            login
          </button>
          <button onClick={logout} disabled={status !== STATUS.LOGGED}>
            logout
          </button>
          <HomeView status={status} userId={base64UserId} />
        </div>
      </section>
    </main>
  );
}
